load("@bazel_skylib//lib:paths.bzl", "paths")
load("@bazel_skylib//lib:sets.bzl", "sets")
load("@gazelle//:def.bzl", "gazelle_binary")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("//gazelle:gazelle.bzl", "gazelle_generation_test")

# Exclude all test data
# gazelle:exclude tests/

go_library(
    name = "kotlin",
    srcs = [
        "configure.go",
        "generate.go",
        "imports.go",
        "kotlin.go",
        "language.go",
        "resolver.go",
    ],
    importpath = "aspect.build/gazelle/gazelle/kotlin",
    visibility = ["//visibility:public"],
    deps = [
        "//gazelle/common",
        "//gazelle/common/git",
        "//gazelle/kotlin/kotlinconfig",
        "//gazelle/kotlin/parser",
        "//internal/logger",
        "@com_github_bazel_contrib_rules_jvm//java/gazelle/javaconfig",
        "@com_github_bazel_contrib_rules_jvm//java/gazelle/private/java",
        "@com_github_bazel_contrib_rules_jvm//java/gazelle/private/maven",
        "@com_github_bazel_contrib_rules_jvm//java/gazelle/private/types",
        "@com_github_emirpasic_gods//sets/treeset",
        "@com_github_rs_zerolog//:zerolog",
        "@gazelle//config:go_default_library",
        "@gazelle//label:go_default_library",
        "@gazelle//language:go_default_library",
        "@gazelle//repo:go_default_library",
        "@gazelle//resolve:go_default_library",
        "@gazelle//rule:go_default_library",
    ],
)

# Internal only for tests
gazelle_binary(
    name = "gazelle_kotlin_binary",
    languages = [":kotlin"],
    visibility = ["//visibility:private"],
)

gazelle_binary(
    name = "gazelle_prod",
    languages = [
        ":kotlin",
        "@gazelle//language/go",
        "@gazelle//language/proto",
    ],
    visibility = ["//visibility:private"],
)

# A separate generation test for each tests/* test case
[
    gazelle_generation_test(
        name = "%s_test" % test_dir.replace("tests/", ""),
        size = "small",
        dir = test_dir,
        env = {
            "ASPECT_CLI_LOG_DEBUG": "TRACE",
        },
        gazelle_binary = "gazelle_kotlin_binary",
    )
    for test_dir in sets.to_list(sets.make([
        paths.dirname(p)
        for p in glob([
            "tests/**/WORKSPACE",
            "tests/**/MODULE.bazel",
        ])
    ]))
]

go_test(
    name = "kotlin_test",
    size = "small",
    srcs = ["kotlin_test.go"],
    embed = [":kotlin"],
)
